<?php
/** @author: Koshkin Alexey <koshkin.alexey@gmail.com> */

/**
 * Class ConsoleCommand
 * Base class for console commands (Yii framework 1.*)
 */
class ConsoleCommand extends CConsoleCommand
{

	/** @var bool If is true script generates output to standart output */
	private $_outputEnabled = true;

	/** @var int Script begin execution timestamp. Used for statistic. */
	private $_timeBegin = 0;

	/** @var array Mapping of counter keys to human-readable indicator labels */
	private $_counterLabel = [];

	/** @var array Values of counter keys */
	private $_counter = [];

	/** @inheritdoc */
	public function __construct()
	{
		// By default output is enabled if we detect that script is executed by human
		$this->_outputEnabled = $this->isExecutedByHuman();

		// We need it to measure script execution time
		$this->_timeBegin = microtime(true);
	}

	/**
	 * Heuristic check that script is executed by human. Terminal sessions variables are serving as indicators.
	 *
	 * @return bool
	 */
	public function isExecutedByHuman()
	{
		return
			isset($_SERVER['SSH_CLIENT'])
			|| isset($_SERVER['TERM'])
			|| isset($_SERVER['SSH_TTY'])
			|| isset($_SERVER['SSH_CONNECTION']);
	}

	/**
	 * Print message to user
	 *
	 * @param $message
	 * @param null $color
	 */
	public function msg($message, $color = null)
	{
		// Maybe this is unnecessary
		$colorAlias = [
			'red' => RCli::CODE_FONT_RED,
			'blue' => RCli::CODE_FONT_BLUE,
			'green' => RCli::CODE_FONT_GREEN,
		];

		if ($color && !empty($colorAlias[$color])) {
			$color = $colorAlias[$color];
		}

		if (!$color) {
			$color = RCli::CODE_DEFAULT;
		}

		$this->out(RCli::writeString($message, $color));
	}

	/**
	 * Does the same as @see msg(), but adds end of line after string output
	 *
	 * @param $message
	 * @param null $color
	 */
	public function line($message, $color = null)
	{
		$this->msg($message, $color);
		$this->out(RCli::$eol);
	}

	/**
	 * Wrapper for all output generated by this class.
	 * Output can be catched and reformatted it it's necessary
	 *
	 * @param string $message
	 */
	protected function out($message)
	{
		if ($this->_outputEnabled) {
			echo $message;
		}
	}

	/**
	 * Increment value of parameter that is interesting for us in final statistic
	 *
	 * @param string|bool $key Human friendly label of parameter (must be exactly the same in all calls)
	 * @param integer $count Increment step
	 * @return integer After increment parameter value
	 */
	public function inc($key = false, $count = 1)
	{
		if (!empty($key) && is_string($key)) {
			$realKey = md5($key);
			$this->_counterLabel[$realKey] = $key;
			$key = $realKey;
		}

		if (empty($this->_counter[$key])) {
			$this->_counter[$key] = 0;
		}
		$this->_counter[$key] += $count;

		return $this->_counter[$key];
	}

	/**
	 * Print command statistic
	 *  - All parameters that we collect in @see inc()
	 *  - Script execution time
	 */
	public function printStat()
	{
		if (count($this->_counter) == 0) {
			return;
		}

		$this->eol();
		$this->out(RCli::hr('=', RCli::CODE_FONT_YELLOW));

		if ($this->_timeBegin > 0) {
			$this->out(
				RCli::writeString(
					sprintf("Script execution time: %.1f sec", microtime(true) - $this->_timeBegin),
					RCli::CODE_FONT_YELLOW
				)
			);
			$this->eol();
		}

		if ($this->_outputEnabled) {
			foreach ($this->_counter as $key => $value) {
				$label = empty($this->_counterLabel[$key]) ? "Number of records" : $this->_counterLabel[$key];
				echo RCli::writeString("   " . $label . ": ", RCli::CODE_FONT_WHITE);
				echo RCli::writeString($value, RCli::CODE_FONT_GREEN);
				$this->eol(2);
			}
		}

		$this->eol(2);
	}

	/**
	 * Output string and boolean result of some action
	 *
	 * @param string $msg Custom message (action name)
	 * @param boolean $status Action status
	 * @param false|mixed $value Indicator value. If false OK|FAIL strings are used, according to $status value
	 */
	public function status($msg, $status, $value = false)
	{
		$this->out(RCli::writeString(sprintf("%'.-70s ", $msg), RCli::CODE_FONT_WHITE));
		if ($status) {
			$this->out(RCli::writeString(sprintf("%8s", $value !== false ? $value : "OK"), RCli::CODE_FONT_GREEN));
		} else {
			$this->out(RCli::writeString(sprintf("%8s", $value !== false ? $value : "FAIL"), RCli::CODE_FONT_RED));
		}

		$this->eol(2);
	}

	/**
	 * @param int $repeat Number of EOL to print
	 */
	public function eol($repeat = 1)
	{
		$this->out(str_repeat(RCli::$eol, $repeat));
	}

} 